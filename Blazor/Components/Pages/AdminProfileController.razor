@page "/admin-edit-profile/{UserId:int}"
@using DomainModels
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JSRuntime
@inject ILogger<AdminProfileController> Logger

<h3>Admin Edit Profile</h3>

@if (!AppState.LoggedIn || !AppState.IsAdmin)
{
    <p>You do not have permission to access this page.</p>
}
else if (user != null)
{
    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="user.FullName" class="form-control" />
        </div>

        <div>
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
        </div>

        <div>
            <label for="phone">Phone Number:</label>
            <InputText id="phone" @bind-Value="user.PhoneNr" class="form-control" />
        </div>

        <div>
            <label for="administrator">Administrator:</label>
            <InputCheckbox id="administrator" @bind-Value="user.Administrator" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        <button type="button" @onclick="DeleteUser" class="btn btn-danger">Delete User</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private User? user;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("API");
    }

    private HttpClient httpClient;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        user = await httpClient.GetFromJsonAsync<User>($"api/Users/{UserId}");
    }

    private async Task HandleValidSubmit()
    {
        try
        {

            var response = await httpClient.PutAsJsonAsync($"api/Users/admin/{UserId}", user);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Profile updated successfully.");
                NavigationManager.NavigateTo("/admin-profile-list");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Error updating profile. Status: {response.StatusCode}, Content: {errorContent}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating profile. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception occurred while updating profile");
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin-profile-list");
    }

    private async Task DeleteUser()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This action cannot be undone."))
        {
            try
            {
                var response = await httpClient.DeleteAsync($"api/Users/{UserId}");

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully.");
                    NavigationManager.NavigateTo("/admin-profile-list");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Logger.LogError($"Error deleting user. Status: {response.StatusCode}, Content: {errorContent}");
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user. Status: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Exception occurred while deleting user");
                await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
            }
        }
    }
}