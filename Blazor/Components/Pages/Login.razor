@page "/login"
@using DomainModels
@inject AppState AppState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<EditForm Model="@loginDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="loginDto.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginDto.Password" class="form-control" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginDto loginDto = new LoginDto();

    private async Task HandleValidSubmit()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Users/login", loginDto);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (result?.Token != null)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                AppState.LoggedIn = true;
                AppState.UserId = result.UserId;
                AppState.IsAdmin = result.IsAdmin;
                NavigationManager.NavigateTo("/");
            }
            NavigationManager.NavigateTo("/profilepage");
        }
        else
        {
            Console.WriteLine("Forkerte oplysninger, prøv igen");
        }
    }

    private class LoginResult
    {
        public string? Token { get; set; }
        public int UserId { get; set; }
        public bool IsAdmin { get; set; }
    }
}

    




