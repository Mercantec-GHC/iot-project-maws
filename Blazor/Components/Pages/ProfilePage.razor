@page "/profilepage"
@inject AppState AppState
@inject IJSRuntime JSRuntime
@using DomainModels
@using System.Globalization
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AppState AppState
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]


<h3>Your Profile</h3>
<button class="btn btn-danger" @onclick="DeleteUserProfile">Slet Profil</button>
<a href="/EditProfile/@AppState.UserId" class="btn btn-primary">Rediger Profil</a>




<!-- Display any error or status messages -->
@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private void EditProfile()
    {
        NavigationManager.NavigateTo($"/EditProfile/{AppState.UserId}"); // Use LoggedInUserId
    }

    public int UserId { get; set; }

    // Message for error or status display
    string message = "";

    // User object to represent the logged-in user
    private User user = new User();

    // Called when the page initializes
    protected override async Task OnInitializedAsync()
    {
        // Fetch the user details first (assumed you're passing userId somehow, e.g., route parameter)
        if (!AppState.LoggedIn) return;
        UserId = AppState.UserId;
        await FetchUserDetails();

    }

    // Method to fetch user details (replace with your own logic to fetch user)
    async Task FetchUserDetails()
    {
        try
        {
            // Assuming you're fetching the logged-in user's details by some identifier (userId)
            user = await HttpClient.GetFromJsonAsync<User>($"api/Users/{UserId}");

            if (user == null)
            {
                message = "Failed to fetch user details.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred while fetching user details: {ex.Message}";
        }
    }
    private async Task DeleteUserProfile()
    {
        // Bekræftelse dialog
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette din profil? Denne handling kan ikke fortrydes."))
        {
            try
            {

                var userId = AppState.UserId;

                // Send en DELETE request til API'en
                var response = await HttpClient.DeleteAsync($"api/Users/{userId}");

                if (response.IsSuccessStatusCode)
                {

                    await JSRuntime.InvokeVoidAsync("localStorage.clear");


                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    message = "Der opstod en fejl ved sletningen. Prøv igen senere.";
                }
            }
            catch (Exception ex)
            {
                // Log fejl og vis brugervenlig besked
                Console.Error.WriteLine(ex.Message);
                message = "Der opstod en fejl. Kontakt venligst administrator.";
            }
        }
        
    }

}


<style>
    .profile-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f4f4f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .profile-info {
        flex-grow: 1;
        margin-left: 20px;
    }

    .profile-name {
        font-size: 2em;
        font-weight: bold;
        color: #333;
    }

    .profile-role {
        font-size: 1.2em;
        color: #666;
    }

    .profile-content {
        margin-top: 40px;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        margin-top: 10px;
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        border-radius: 8px;
    }
</style>
