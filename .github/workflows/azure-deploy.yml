
name: Deploy TamaTown Central to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Show project structure and working directory
      run: |
        echo "Current working directory: $(pwd)"
        echo "Repository structure:"
        find . -name "*.csproj" -type f | head -20
        echo ""
        echo "API project details:"
        ls -la API/
        echo ""
        echo "API.csproj content:"
        cat API/API.csproj
    
    - name: Restore dependencies
      run: dotnet restore H3-Projekt.sln
    
    - name: Build solution
      run: dotnet build H3-Projekt.sln --configuration Release --no-restore
    
    - name: Run tests (if any)
      run: dotnet test H3-Projekt.sln --no-restore --verbosity normal --configuration Release
      continue-on-error: true
    
    # Try publish with absolute path and maximum verbosity
    - name: Publish API with full debugging
      run: |
        echo "Current directory: $(pwd)"
        echo "Creating output directory manually..."
        mkdir -p ./api-publish
        echo "Directory created, listing contents:"
        ls -la
        echo ""
        echo "Publishing API with maximum verbosity..."
        dotnet publish API/API.csproj \
          --configuration Release \
          --no-restore \
          --output "$(pwd)/api-publish" \
          --verbosity diagnostic \
          --no-build || echo "Publish failed with exit code: $?"
        
        echo ""
        echo "Post-publish directory listing:"
        ls -la
        
        echo ""
        echo "Checking if api-publish exists and contents:"
        if [ -d "./api-publish" ]; then
          echo "✅ Directory exists"
          ls -la ./api-publish/
        else
          echo "❌ Directory still missing"
        fi
    
    # Alternative: Try publishing to a different location
    - name: Alternative publish attempt
      run: |
        echo "Trying alternative publish approach..."
        dotnet publish API/API.csproj \
          --configuration Release \
          --no-restore \
          --output /tmp/api-publish \
          --verbosity normal
        
        echo "Checking /tmp/api-publish:"
        if [ -d "/tmp/api-publish" ]; then
          echo "✅ Alternative location worked!"
          ls -la /tmp/api-publish/
          echo "Copying to expected location..."
          cp -r /tmp/api-publish ./api-publish
          echo "Copy completed, checking final location:"
          ls -la ./api-publish/
        else
          echo "❌ Alternative location also failed"
        fi
    
    # If that fails, try building and publishing separately
    - name: Manual build and publish API
      if: always()
      run: |
        echo "Trying manual approach..."
        echo "Building API specifically:"
        dotnet build API/API.csproj --configuration Release --no-restore --verbosity normal
        
        echo ""
        echo "Checking build output:"
        find API -name "*.dll" -type f
        
        echo ""
        echo "Publishing with different parameters:"
        dotnet publish API/API.csproj \
          --configuration Release \
          --output ./api-manual-publish \
          --verbosity normal \
          --self-contained false \
          --no-restore
        
        echo ""
        echo "Checking manual publish:"
        if [ -d "./api-manual-publish" ]; then
          echo "✅ Manual publish worked!"
          ls -la ./api-manual-publish/
          # Copy to expected location if main publish failed
          if [ ! -d "./api-publish" ]; then
            cp -r ./api-manual-publish ./api-publish
          fi
        else
          echo "❌ Manual publish also failed"
        fi
    
    # Verify final API publish
    - name: Final API verification
      run: |
        echo "Final verification of API publish:"
        if [ -d "./api-publish" ]; then
          echo "✅ API publish directory found!"
          echo "Contents:"
          ls -la ./api-publish/
          echo "File count: $(find ./api-publish -type f | wc -l)"
          
          # Check for essential files
          if [ -f "./api-publish/API.dll" ]; then
            echo "✅ API.dll found"
          else
            echo "❌ API.dll not found"
            echo "Looking for any .dll files:"
            find ./api-publish -name "*.dll" -type f || echo "No .dll files found"
          fi
        else
          echo "❌ API publish directory still not found!"
          echo "Current directory contents:"
          ls -la
          echo "This is a critical failure - stopping deployment"
          exit 1
        fi
    
    # Similar approach for Blazor
    - name: Publish Blazor with debugging
      run: |
        echo "Publishing Blazor project..."
        mkdir -p ./blazor-publish
        
        dotnet publish Blazor/Blazor.csproj \
          --configuration Release \
          --no-restore \
          --output "$(pwd)/blazor-publish" \
          --verbosity normal || echo "Blazor publish failed with exit code: $?"
        
        echo "Checking Blazor publish:"
        if [ -d "./blazor-publish" ]; then
          echo "✅ Blazor publish succeeded"
          ls -la ./blazor-publish/
        else
          echo "❌ Blazor publish failed, trying alternative..."
          dotnet publish Blazor/Blazor.csproj \
            --configuration Release \
            --output /tmp/blazor-publish \
            --verbosity normal
          
          if [ -d "/tmp/blazor-publish" ]; then
            cp -r /tmp/blazor-publish ./blazor-publish
            echo "✅ Blazor alternative publish succeeded"
          else
            echo "❌ Blazor publish completely failed"
          fi
        fi
    
    # Deploy API to Azure App Service
    - name: Deploy API to Azure App Service
      if: success()
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'TamaTownCentralAPI'
        publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
        package: ./api-publish
    
    # Deploy Blazor to Azure App Service
    - name: Deploy Blazor to Azure App Service
      if: success()
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'TamaTownCentral'
        publish-profile: ${{ secrets.AZURE_BLAZOR_PUBLISH_PROFILE }}
        package: ./blazor-publish
