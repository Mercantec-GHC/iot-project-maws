name: Deploy TamaTown Central to Azure
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

env:
  DOTNET_VERSION: '8.0.x'
  # Define solution and project paths for clarity
  SOLUTION_FILE_PATH: H3-Projekt.sln
  API_PROJECT_PATH: API/API.csproj
  BLAZOR_PROJECT_PATH: Blazor/Blazor.csproj
  API_PUBLISH_OUTPUT_PATH: ./api-publish
  BLAZOR_PUBLISH_OUTPUT_PATH: ./blazor-publish

jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies for the entire solution
      run: dotnet restore "${{ env.SOLUTION_FILE_PATH }}"

    - name: Build the entire solution
      run: dotnet build "${{ env.SOLUTION_FILE_PATH }}" --configuration Release --no-restore

    - name: Run tests (if any)
      run: dotnet test "${{ env.SOLUTION_FILE_PATH }}" --no-build --verbosity normal --configuration Release
      continue-on-error: true # Or set to false if tests must pass

- name: Publish API Project
      run: |
        echo "Current working directory: $(pwd)"
        echo "Attempting to create API publish directory manually: ${{ env.API_PUBLISH_OUTPUT_PATH }}"
        mkdir -p "${{ env.API_PUBLISH_OUTPUT_PATH }}"
        echo "Listing contents of current directory before publish:"
        ls -la
        echo "Listing contents of API publish directory (if it exists) before publish:"
        ls -la "${{ env.API_PUBLISH_OUTPUT_PATH }}" || echo "API publish directory does not exist yet or ls failed."
        
        echo "Publishing API project: ${{ env.API_PROJECT_PATH }} with detailed verbosity"
        dotnet publish "${{ env.API_PROJECT_PATH }}" \
          --configuration Release \
          # Removed --no-restore to let publish handle it if needed
          --output "${{ env.API_PUBLISH_OUTPUT_PATH }}" \
          --verbosity detailed # Increased verbosity

        echo ""
        echo "Listing contents of API publish directory (${{ env.API_PUBLISH_OUTPUT_PATH }}) after publish:"
        ls -R "${{ env.API_PUBLISH_OUTPUT_PATH }}" || echo "Failed to list contents of API publish directory."
        echo ""
        echo "Verifying API.dll presence in API publish directory:"
        if [ -f "${{ env.API_PUBLISH_OUTPUT_PATH }}/API.dll" ]; then
          echo "✅ API.dll found in ${{ env.API_PUBLISH_OUTPUT_PATH }}"
        else
          echo "❌ CRITICAL: API.dll NOT found in ${{ env.API_PUBLISH_OUTPUT_PATH }}"
          echo "This will likely cause deployment issues."
          # Consider adding 'exit 1' here if API.dll is absolutely mandatory for the next steps
          # exit 1
        fi                                                                                                                                                               
      env: # Ensuring environment variables are explicitly available to this step if defined globally
        API_PROJECT_PATH: ${{ env.API_PROJECT_PATH }}
        API_PUBLISH_OUTPUT_PATH: ${{ env.API_PUBLISH_OUTPUT_PATH }}
    # --- Simplified Blazor Publish ---
    - name: Publish Blazor Project
      run: |
        echo "Publishing Blazor project: ${{ env.BLAZOR_PROJECT_PATH }}"
        dotnet publish "${{ env.BLAZOR_PROJECT_PATH }}" \
          --configuration Release \
          --no-restore \
          --output "${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}" \
          --verbosity normal
        echo ""
        echo "Listing contents of Blazor publish directory (${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}):"
        ls -R "${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}"
        echo ""
        echo "Verifying Blazor.dll presence in Blazor publish directory:"
        if [ -f "${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}/Blazor.dll" ]; then
          echo "✅ Blazor.dll found in ${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}"
        else
          echo "❌ CRITICAL: Blazor.dll NOT found in ${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}"
        fi

    # Deploy API to Azure App Service
    - name: Deploy API to Azure App Service
      if: success() # Or consider adding a check for API.dll presence
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'TamaTownCentralAPI'
        publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
        package: ${{ env.API_PUBLISH_OUTPUT_PATH }}

    # Deploy Blazor to Azure App Service
    - name: Deploy Blazor to Azure App Service
      if: success() # Or consider adding a check for Blazor.dll presence
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'TamaTownCentral'
        publish-profile: ${{ secrets.AZURE_BLAZOR_PUBLISH_PROFILE }}
        package: ${{ env.BLAZOR_PUBLISH_OUTPUT_PATH }}

